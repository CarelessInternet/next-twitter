// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// https://next-auth.js.org/adapters/prisma
// NextAuth's database schema: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-prisma/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling
  relationMode = "prisma"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  verified      Boolean     @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]
  replies       Reply[]
  replyLikes    ReplyLike[]
}

model Post {
  id             Int      @id @default(autoincrement())
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  content        String?  @db.VarChar(500)
  originalPostId Int?
  originalPost   Post?    @relation("Repost", fields: [originalPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt      DateTime @default(now())
  likes          Like[]
  replies        Reply[]
  reposts        Post[]   @relation("Repost")

  @@index(authorId)
  @@index(originalPostId)
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index(userId)
  @@index(postId)
}

// Deeply nested replies are possible, but selecting them are not supported as of 31/07/23
// https://github.com/prisma/prisma/issues/3725
model Reply {
  id        Int         @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  content   String      @db.VarChar(500)
  postId    Int
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  likes     ReplyLike[]

  @@index(userId)
  @@index(postId)
}

model ReplyLike {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  replyId   Int
  reply     Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index(userId)
  @@index(replyId)
}
